#!/bin/bash

# usage generate_favicon /logo/image.png
generate_favicon() {
  magick convert -resize x16 -gravity center -crop 16x16+0+0 "$1" -flatten -colors 256 -background transparent "$PWD/favicon.ico"
}

npminit() {
  mkdir -p $1
  cd $1
  git init
  npm init -y
  npm i -s typescript
  open -a "Google Chrome" https://github.com/new/
  npx gitignore node
  git add -A
  git commit -m "Initial Commit"
  echo "Please update the remote and then push the code"
}

uuid(){
  uuidvar=$(npx uuid)
  echo $uuidvar
  echo $uuidvar | tr -d '\n' | pbcopy
}

gh_actions(){
    mkdir .github
    mkdir .github/workflows
    touch .github/workflows/deploy.yml
    touch .github/workflows/test.yml
    echo "Done"
}

notify(){
    title="$1"
    message="$2"
    /usr/bin/osascript -e "display notification \"$message\" with title \"$title\" sound name \"Hero\""
}

plan(){
    filename="$(date '+%Y-%m-%d')"
    vim ~/projects/notes/plans/$filename.md
}

# Source: https://h.daily-dev-tips.com/bash-never-forget-to-git-commit-again
# https://github.com/rebelchris/afterwork
afterwork(){
# Bash script to check which git projects need commiting
# Define dir
DIR=~/Projects/
GITBASED=.git
# Step 1 loop through all folders in a dir
for dir in $DIR*
do
    # Check if we have a directory
    if [[ -d $dir ]]; then
        # Change into working directory
        cd $dir
        # Define empty message variable
        MSG="";
        # Check if directory contains .git folder
        if [ -d "$GITBASED" ]; then
            # Define our test for Git Status
            TEST=$(git status $dir);
            # Check if git status is perfect
            if [[ $TEST == *"nothing to commit"* ]]; then
                MSG=": No changes ‚úÖ"
            # Check if git status has unstaged changes
            elif [[ $TEST == *"Changes not staged for commit"* ]]; then
                MSG=": Unstaged changes ü§∑‚Äç‚ôÇÔ∏è"
            # Check if git status has uncommitted changes
            elif [[ $TEST == *"Untracked files"* ]]; then
                MSG=": You forgot to commit some files üò°"
            fi 
        else 
            # Not a valid git project
            MSG=": Not a valid git project üëÄ"
        fi
        echo ${dir##*/}$MSG
        cd ..
    fi
done
echo "All done for today! üî•"
}
